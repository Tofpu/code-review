{"pageProps":{"note":{"id":"szp6r8w3ldllgnitjlwqi36","title":"Cooleg 1","desc":"","updated":1652492879625,"created":1652414487503,"custom":{},"fname":"code-review.cooleg-1","type":"note","vault":{"fsPath":"vault"},"contentHash":"6e4de4d12159e35902ff3fce0f2138d3","links":[],"anchors":{"information":{"type":"header","text":"Information","value":"information","line":8,"column":0,"depth":2},"requestor":{"type":"header","text":"Requestor","value":"requestor","line":9,"column":0,"depth":4},"project-link":{"type":"header","text":"Project Link","value":"project-link","line":12,"column":0,"depth":4},"project-model":{"type":"header","text":"Project Model","value":"project-model","line":15,"column":0,"depth":4},"code-review":{"type":"header","text":"Code Review","value":"code-review","line":18,"column":0,"depth":2},"encapsulation":{"type":"header","text":"Encapsulation:","value":"encapsulation","line":21,"column":0,"depth":3},"scenario-wanting-to-print-out-the-data":{"type":"header","text":"Scenario: Wanting to print out the data","value":"scenario-wanting-to-print-out-the-data","line":28,"column":0,"depth":4},"not-following-encapsulation-pattern":{"type":"header","text":"Not Following Encapsulation Pattern","value":"not-following-encapsulation-pattern","line":31,"column":0,"depth":5},"following-encapsulation-pattern":{"type":"header","text":"Following Encapsulation Pattern","value":"following-encapsulation-pattern","line":51,"column":0,"depth":5},"references-singleton-and-static":{"type":"header","text":"References, Singleton and Static:","value":"references-singleton-and-static","line":79,"column":0,"depth":3},"reasoning":{"type":"header","text":"Reasoning","value":"reasoning","line":105,"column":0,"depth":4},"running-io-operations-on-main-thread":{"type":"header","text":"Running I/O Operations on Main Thread:","value":"running-io-operations-on-main-thread","line":110,"column":0,"depth":3},"readability":{"type":"header","text":"Readability","value":"readability","line":115,"column":0,"depth":2},"class-naming":{"type":"header","text":"Class Naming:","value":"class-naming","line":116,"column":0,"depth":3},"long-methods":{"type":"header","text":"Long methods:","value":"long-methods","line":124,"column":0,"depth":3},"naming-convention":{"type":"header","text":"Naming Convention:","value":"naming-convention","line":127,"column":0,"depth":3},"other":{"type":"header","text":"Other","value":"other","line":130,"column":0,"depth":2},"multiple-lookups":{"type":"header","text":"Multiple Lookups:","value":"multiple-lookups","line":131,"column":0,"depth":3},"-and-equals-in-enums":{"type":"header","text":"== and .equals in Enums:","value":"-and-equals-in-enums","line":154,"column":0,"depth":3},"thanks-to":{"type":"header","text":"Thanks to:","value":"thanks-to","line":163,"column":0,"depth":2},"references":{"type":"header","text":"References:","value":"references","line":166,"column":0,"depth":2}},"children":[],"parent":"388w3p1598pmub7oyu34ef0","data":{}},"body":"<h1 id=\"cooleg-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cooleg-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Cooleg 1</h1>\n<h2 id=\"information\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#information\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Information</h2>\n<h4 id=\"requestor\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#requestor\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Requestor</h4>\n<ul>\n<li>Cooleg (308702273154973717)</li>\n</ul>\n<h4 id=\"project-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#project-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Project Link</h4>\n<ul>\n<li><a href=\"https://github.com/awesmprogram/Civilization\">https://github.com/awesmprogram/Civilization</a></li>\n</ul>\n<h4 id=\"project-model\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#project-model\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Project Model</h4>\n<ul>\n<li>OOP</li>\n</ul>\n<h2 id=\"code-review\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#code-review\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Code Review</h2>\n<p>I'll be experimenting around with the code-review layout, feel free to let me know if you got some feedback.</p>\n<h3 id=\"encapsulation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#encapsulation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Encapsulation:</h3>\n<p>One of the fundamentals of OOP (Object-Oriented Programming) concepts is called Encapsulation. Encapsulation (or also referred to as Information Hiding) is in simple terms, a concept of locking behind your data, and have methods interacting with the data instead, that way you would retain the ability to keep track of what's happening.</p>\n<p>By not applying that concept to your code design, you're essentially giving up control of your data to the hands of other classes, and that's not good.</p>\n<p>If you're wondering why that's the case, let me create a scenario to explain the cons.</p>\n<h4 id=\"scenario-wanting-to-print-out-the-data\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#scenario-wanting-to-print-out-the-data\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Scenario: Wanting to print out the data</h4>\n<p>Let's say we wanted to print out the data before and after every time it's updated for debugging purposes.</p>\n<h5 id=\"not-following-encapsulation-pattern\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#not-following-encapsulation-pattern\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Not Following Encapsulation Pattern</h5>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// not possible since we gave up control of our data</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomClass</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">modifyPersonAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"following-encapsulation-pattern\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#following-encapsulation-pattern\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Following Encapsulation Pattern</h5>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// retained control of our data</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// added a way to update the age, but with our own way</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomClass</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">modifyPersonAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// > before: 5 > After: 6</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>It's a pretty simple concept in hindsight, but it's a fundamental one to say the least.</p>\n<h3 id=\"references-singleton-and-static\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#references-singleton-and-static\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>References, Singleton and Static:</h3>\n<p>I believe that the <code>Manage</code> reference class should either, be cached somewhere, transformed into a Singleton, or turn the <code>ItemStack</code>'s to be constant.</p>\n<p>As far as I can tell from the code, the ItemStack that was created was not bound to change in runtime (when the code is running), so it should be a constant. We'll be utilizing something called <code>Static Initialization Block</code>.</p>\n<p>Example can be seen in <a href=\"https://gist.github.com/Tofpu/343bd4c79bde5129f38dfe987e122e9d\">https://gist.github.com/Tofpu/343bd4c79bde5129f38dfe987e122e9d</a> or here:</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">final</span> <span class=\"token class-name\">ItemStack</span> PVP_TOGGLE_ENABLED<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">ItemStack</span> PVP_TOGGLE_DISABLED<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    PVP_TOGGLE_ENABLED <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ItemStack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Material</span><span class=\"token punctuation\">.</span>GREEN_CONCRETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ItemMeta</span> pvpToggledEnabledMeta <span class=\"token operator\">=</span> pvptoggle<span class=\"token punctuation\">.</span><span class=\"token function\">getItemMeta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pvpToggledEnabledMeta<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChatColor</span><span class=\"token punctuation\">.</span>GREEN <span class=\"token operator\">+</span> <span class=\"token string\">\"PVP is currently enabled!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pvpToggledEnabledMeta<span class=\"token punctuation\">.</span><span class=\"token function\">setLore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to disable PVP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PVP_TOGGLE_ENABLED<span class=\"token punctuation\">.</span><span class=\"token function\">setItemMeta</span><span class=\"token punctuation\">(</span>pvpToggledEnabledMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    PVP_TOGGLE_DISABLED <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ItemStack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Material</span><span class=\"token punctuation\">.</span>GREEN_CONCRETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ItemMeta</span> pvpToggledDisabledMeta <span class=\"token operator\">=</span> pvptoggle<span class=\"token punctuation\">.</span><span class=\"token function\">getItemMeta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pvpToggledDisabledMeta<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChatColor</span><span class=\"token punctuation\">.</span>GREEN <span class=\"token operator\">+</span> <span class=\"token string\">\"PVP is currently disabled!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    pvpToggledDisabledMeta<span class=\"token punctuation\">.</span><span class=\"token function\">setLore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to enable PVP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    PVP_TOGGLE_DISABLED<span class=\"token punctuation\">.</span><span class=\"token function\">setItemMeta</span><span class=\"token punctuation\">(</span>pvpToggledDisabledMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"reasoning\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#reasoning\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Reasoning</h4>\n<p>My personal belief is that if a new instance of a class has been called twice at any given moment, the new instance is (or should be) uniquely different to the previous instance that was created - and if it weren't, it should be cached, or transformed into a Singleton.</p>\n<p>I might've missed to take something into account. (let me know if I did)</p>\n<h3 id=\"running-io-operations-on-main-thread\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#running-io-operations-on-main-thread\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Running I/O Operations on Main Thread:</h3>\n<p>Running I/O operations on the main thread is heavily forbidden upon, as it'll force the main thread to wait until the operation is complete - and by nature, I/O operations are very resource intensive.</p>\n<p>I see that the config is being saved in the main thread, and as I mentioned above, it's a really bad practice. Look to the references below to learn how to save the config (or anything that IO/Network/thread-safe) async.</p>\n<h2 id=\"readability\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#readability\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Readability</h2>\n<h3 id=\"class-naming\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#class-naming\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Class Naming:</h3>\n<p>I noticed that some of the classes naming are quite misleading:</p>\n<ul>\n<li>CivUtils -> CivPlugin</li>\n<li>BorderUtils -> BorderHandler</li>\n<li>...etc</li>\n</ul>\n<p>The class names should aline with the class responsibilities for readability reasons. If the class is responsible for registering items, it should mention Registry somewhere in the class name (or something similar), and etc.</p>\n<h3 id=\"long-methods\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#long-methods\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Long methods:</h3>\n<p>I see that the <code>ChatColor.translateAlternateColorCodes</code> method is being utilized directly, I'd highly recommend you to create a util class that would call the mentioned method for readability purposes.</p>\n<h3 id=\"naming-convention\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#naming-convention\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Naming Convention:</h3>\n<p>The methods inside Manage class is not following the Java naming conventions.</p>\n<h2 id=\"other\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#other\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Other</h2>\n<h3 id=\"multiple-lookups\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#multiple-lookups\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Multiple Lookups:</h3>\n<p>I see that there's unnecessary lookup operations occurrisng, which could simply be cut down to a single lookup operation by caching said result to a variable. (referring <code>BorderUtils</code> class).</p>\n<p>It might seem to be insignificant at the moment, but that won't always be the case when you're dealing with concurrent operations (which will cost you a lot of time debugging the issue)</p>\n<p>Example can be seen in <a href=\"https://gist.github.com/Tofpu/2af109422b32b02ed33b421281751910\">https://gist.github.com/Tofpu/2af109422b32b02ed33b421281751910</a> or here:</p>\n<pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> scoreMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// doing multiple lookup to scoreMap, bad!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">69</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> score <span class=\"token operator\">=</span> scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">,</span> score <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// decreased the lookup operation to one, good!</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> score <span class=\"token operator\">=</span> scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">></span> <span class=\"token number\">69</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      scoreMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tofpu\"</span><span class=\"token punctuation\">,</span> score <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"-and-equals-in-enums\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#-and-equals-in-enums\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>==</code> and <code>.equals</code> in Enums:</h3>\n<p>While comparing Enum's with .equals is not certainly wrong, it's overall a better practice to directly compare Enum's with <code>==</code>.</p>\n<p>By following that advice, you'll gain the following advantages:</p>\n<ul>\n<li>NullPointerException won't be thrown if the mentioned enum was nonexistent.</li>\n<li>Be subject to type compatibility at compile time.</li>\n</ul>\n<p>You can find references about this below.</p>\n<h2 id=\"thanks-to\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#thanks-to\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Thanks to:</h2>\n<ul>\n<li>Merlin (for correcting me about the differences between <code>==</code> and <code>.equals</code> in Enums)</li>\n</ul>\n<h2 id=\"references\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#references\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>References:</h2>\n<ul>\n<li>Encapsulation - <a href=\"https://refactoring.guru/encapsulate-field\">https://refactoring.guru/encapsulate-field</a></li>\n<li>Bukkit Scheduler - <a href=\"https://bukkit.fandom.com/wiki/Scheduler_Programming#Example_2\">https://bukkit.fandom.com/wiki/Scheduler_Programming#Example_2</a></li>\n<li>Differences between <code>==</code> and <code>.equals</code> in Enums - <a href=\"https://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals\">https://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals</a></li>\n<li>Singleton - <a href=\"https://refactoring.guru/design-patterns/singleton\">https://refactoring.guru/design-patterns/singleton</a></li>\n<li>Static Initialization Block - <a href=\"https://stackoverflow.com/questions/335311/what-is-the-difference-between-a-static-and-a-non-static-initialization-code-blo\">https://stackoverflow.com/questions/335311/what-is-the-difference-between-a-static-and-a-non-static-initialization-code-blo</a></li>\n</ul>","noteIndex":{"id":"ij2lf9bl80nk3gr3k9mgaxn","title":"root","desc":"","updated":1652438740193,"created":1652415450680,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"ecc8b50ada25888f859008ffaf4f3f24","links":[],"anchors":{"welcome":{"type":"header","text":"Welcome!","value":"welcome","line":7,"column":0,"depth":1},"links":{"type":"header","text":"Links","value":"links","line":11,"column":0,"depth":2}},"children":["388w3p1598pmub7oyu34ef0"],"parent":null,"data":{},"body":"# Welcome!\n\nWill be written...\n\n## Links\n- Discord: Tofpu#3224 (__ID__: 470088969728557067)\n- Discord Server: https://tofpu.me/discord\n- GitHub: https://github.com/tofpu\n- Repository: https://github.com/tofpu/code-review"},"collectionChildren":null,"customHeadContent":"<!DOCTYPE html>\n<html>\n    <head>\n        <style>\n            @media (prefers-color-scheme: dark) {\n            /* Invert all elements on the body while attempting to not alter the hue substantially. */\n            body {\n                filter: invert(100%) hue-rotate(180deg);\n            }\n\n            /* Workarounds and optical adjustments. */\n\n            /* Firefox workaround: Set the background colour for the html\n                element separately because, unlike other browsers, Firefox\n                doesn’t apply the filter to the root element’s background. */\n            html {\n                background-color: #111;\n            }\n\n            /* Do not invert media (revert the invert). */\n            img, video, iframe {\n                filter: invert(100%) hue-rotate(180deg);\n            }\n\n            /* Improve contrast on icons. */\n            .icon {\n                filter: invert(15%) hue-rotate(180deg);\n            }\n\n            /* Re-enable code block backgrounds. */\n            pre {\n                filter: invert(6%);\n            }\n\n            /* Improve contrast on list item markers. */\n            li::marker {\n                color: #666;\n            }\n            }\n        </style>\n    </head>\n</html>","config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://code-review.tofpu.me","siteFaviconPath":"./favicon.ico","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableHierarchyDisplay":true,"hierarchyDisplayTitle":"Children","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Code Review | tofpu.me","description":"I'm a self-taught programmer, and this site was created for me to share my code-reviews to the public.","author":"tofpu","twitter":"tofpu"},"github":{"cname":"code-review.tofpu.me","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/tofpu/code-review"},"enablePrettyLinks":true,"customHeaderPath":"custom_header.html","siteIndex":"root"}}},"__N_SSG":true}