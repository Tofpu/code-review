{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"root","n":1},"1":{"v":"# Welcome!\n\nWill be written...\n\n## Links\n- Discord: Tofpu#3224 (__ID__: 470088969728557067)\n- Discord Server: https://tofpu.me/discord\n- GitHub: https://github.com/tofpu\n- Repository: https://github.com/tofpu/code-review","n":0.25}}},{"i":2,"$":{"0":{"v":"Code Review","n":0.707},"1":{"v":"\nHere you can read about projects that I have reviewed.","n":0.316}}},{"i":3,"$":{"0":{"v":"Cooleg 1","n":0.707},"1":{"v":"\n## Information\n#### Requestor\n* Cooleg (308702273154973717)\n\n#### Project Link\n* https://github.com/awesmprogram/Civilization\n\n#### Project Model\n* OOP\n\n## Code Review\nI'll be experimenting around with the code-review layout, feel free to let me know if you got some feedback.\n\n### Encapsulation:  \nOne of the fundamentals of OOP (Object-Oriented Programming) concepts is called Encapsulation. Encapsulation (or also referred to as Information Hiding) is in simple terms, a concept of locking behind your data, and have methods interacting with the data instead, that way you would retain the ability to keep track of what's happening.\n\nBy not applying that concept to your code design, you're essentially giving up control of your data to the hands of other classes, and that's not good.\n\nIf you're wondering why that's the case, let me create a scenario to explain the cons.\n\n#### Scenario: Wanting to print out the data\nLet's say we wanted to print out the data before and after every time it's updated for debugging purposes.\n\n##### Not Following Encapsulation Pattern\n```java\n    public class Person {\n        public int age;\n\n        public Person(final int age) {\n            this.age = age;\n        }\n\n        // not possible since we gave up control of our data\n    }\n\n    public class RandomClass {\n        public modifyPersonAge() {\n            final Person person = new Person(5);\n            person.age = 6;\n        }\n    }\n```\n\n##### Following Encapsulation Pattern\n```java\n    public class Person {\n        // retained control of our data\n        private int age;\n\n        public Person(final int age) {\n            this.age = age;\n        }\n\n        // added a way to update the age, but with our own way\n        public void setAge(final int age) {\n            Logger.debug(\"Before \" + age);\n            this.age = age;\n            Logger.debug(\"After \" + age);\n        }\n    }\n\n    public class RandomClass {\n        public modifyPersonAge() {\n            final Person person = new Person(5);\n            person.setAge(6); // > before: 5 > After: 6\n        }\n    }\n```\n\nIt's a pretty simple concept in hindsight, but it's a fundamental one to say the least.\n\n### References, Singleton and Static:\nI believe that the `Manage` reference class should either, be cached somewhere, transformed into a Singleton, or turn the `ItemStack`'s to be constant.\n\nAs far as I can tell from the code, the ItemStack that was created was not bound to change in runtime (when the code is running), so it should be a constant. We'll be utilizing something called `Static Initialization Block`.\n\nExample can be seen in https://gist.github.com/Tofpu/343bd4c79bde5129f38dfe987e122e9d or here:\n```java\n  final ItemStack PVP_TOGGLE_ENABLED;\n  final ItemStack PVP_TOGGLE_DISABLED;\n\n  static {\n    PVP_TOGGLE_ENABLED = new ItemStack(Material.GREEN_CONCRETE);\n    final ItemMeta pvpToggledEnabledMeta = pvptoggle.getItemMeta();\n    pvpToggledEnabledMeta.setDisplayName(ChatColor.GREEN + \"PVP is currently enabled!\");\n\n    pvpToggledEnabledMeta.setLore(Collections.singletonList(\"Click to disable PVP\");\n    PVP_TOGGLE_ENABLED.setItemMeta(pvpToggledEnabledMeta);\n\n    PVP_TOGGLE_DISABLED = new ItemStack(Material.GREEN_CONCRETE);\n    final ItemMeta pvpToggledDisabledMeta = pvptoggle.getItemMeta();\n    pvpToggledDisabledMeta.setDisplayName(ChatColor.GREEN + \"PVP is currently disabled!\");\n\n    pvpToggledDisabledMeta.setLore(Collections.singletonList(\"Click to enable PVP\");\n    PVP_TOGGLE_DISABLED.setItemMeta(pvpToggledDisabledMeta);\n```\n\n#### Reasoning\nMy personal belief is that if a new instance of a class has been called twice at any given moment, the new instance is (or should be) uniquely different to the previous instance that was created - and if it weren't, it should be cached, or transformed into a Singleton.\n\nI might've missed to take something into account. (let me know if I did)\n\n### Running I/O Operations on Main Thread:\nRunning I/O operations on the main thread is heavily forbidden upon, as it'll force the main thread to wait until the operation is complete - and by nature, I/O operations are very resource intensive.\n\nI see that the config is being saved in the main thread, and as I mentioned above, it's a really bad practice. Look to the references below to learn how to save the config (or anything that IO/Network/thread-safe) async.\n\n## Readability\n### Class Naming:\nI noticed that some of the classes naming are quite misleading:\n- CivUtils -> CivPlugin\n- BorderUtils -> BorderHandler\n- ...etc\n\nThe class names should aline with the class responsibilities for readability reasons. If the class is responsible for registering items, it should mention Registry somewhere in the class name (or something similar), and etc.\n\n### Long methods: \nI see that the `ChatColor.translateAlternateColorCodes` method is being utilized directly, I'd highly recommend you to create a util class that would call the mentioned method for readability purposes.\n\n### Naming Convention: \nThe methods inside Manage class is not following the Java naming conventions.\n\n## Other\n### Multiple Lookups: \nI see that there's unnecessary lookup operations occurrisng, which could simply be cut down to a single lookup operation by caching said result to a variable. (referring `BorderUtils` class).\n\nIt might seem to be insignificant at the moment, but that won't always be the case when you're dealing with concurrent operations (which will cost you a lot of time debugging the issue)\n\nExample can be seen in <https://gist.github.com/Tofpu/2af109422b32b02ed33b421281751910> or here:\n```java\n  final Map<String, Integer> scoreMap = new HashMap<>();\n  scoreMap.put(\"Tofpu\", 69);\n  \n  // doing multiple lookup to scoreMap, bad!\n  if (scoreMap.get(\"Tofpu\") > 69) {\n      final Integer score = scoreMap.get(\"Tofpu\");\n      scoreMap.put(\"Tofpu\", score + 1);\n  }\n\n  // decreased the lookup operation to one, good!\n  final Integer score = scoreMap.get(\"Tofpu\");\n  if (score > 69) {\n      scoreMap.put(\"Tofpu\", score + 1);\n  }\n```\n\n### `==` and `.equals` in Enums: \nWhile comparing Enum's with .equals is not certainly wrong, it's overall a better practice to directly compare Enum's with `==`.\n\nBy following that advice, you'll gain the following advantages:\n* NullPointerException won't be thrown if the mentioned enum was nonexistent.\n* Be subject to type compatibility at compile time.\n\nYou can find references about this below.\n\n## Thanks to:\n- Merlin (for correcting me about the differences between `==` and `.equals` in Enums)\n\n## References:\n- Encapsulation - <https://refactoring.guru/encapsulate-field>\n- Bukkit Scheduler - <https://bukkit.fandom.com/wiki/Scheduler_Programming#Example_2>\n- Differences between `==` and `.equals` in Enums - <https://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals>\n- Singleton - <https://refactoring.guru/design-patterns/singleton>\n- Static Initialization Block - <https://stackoverflow.com/questions/335311/what-is-the-difference-between-a-static-and-a-non-static-initialization-code-blo>\n","n":0.034}}}]}
